==========================
life Requirements Document
==========================

The purpose of this document is to detail the requirements for life, 
a Python implementation of Conway's Game of Life. This is an initial 
take for the purposes of planning. There may be additional requirements 
or non-required features added in the future.


Purpose
-------
The purpose of life are:

* To be able to run an instance of Conway's Game of Life


Functional Requirements
-----------------------
The following are the functional requirements for life:

1. life can display the current generation of cells
2. life can calculate the next generation of cells
3. life can handle cell grids of varying size
4. life allows cell activity to wrap around the edges of the grid
5. Patterns can be imported from file
6. The current grid state can be saved to file
7. life can progress cell generation automatically
8. life can pause generation progression
9. life can randomize the initial cell state


Technical Requirements
----------------------
The following are the technical requirements for life:

1. life is written in Python
2. life will have a command line interface that uses blessed


Design Discussion
-----------------
What am I going to need:

* A grid of cells
* An engine that understands the behavior of cells
* A user interface that displays the grid

I think that's it. It's a lot fewer pieces that blackjack had, but 
that's probably not surprising. There is no concept of players here. 
It's just the cells, their behavior, and the interface.


The Rules of Conway's Game of Life
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
The rules for the GoL are:

* A live cell with 2 or 3 neighbors survives
* A dead cell with 3 neighbors becomes alive
* All other cells die or stay dead


Grid
~~~~
While I may go for a more efficient implementation in the future. I'm 
going to start with something very straight forward. The cells will 
be stored in a two dimensional array. The grid must:

* Contain cells that are represented by booleans indicating the status 
  of the cell.
* Provide a very basic string representation of the grid.
* Allow the grid size to be set on initialization.
* Calculate the next generation.
* Randomize the value of each cell.

Now, that last part requires the grid to understand the rules of the 
game. That should be fine for now, but may want to look at adding the 
ability to alter the game rules in the future.


UI
~~
The UI needs to:

* Display the grid.
* Allow the user to randomize the grid values.
* Allow the user to import grid states.
* Allow the user to change cell states.
* Allow the user to advance to the generation.
* Allow the user to begin automatic advancement of the generation.
* Allow the user to end automatic advancement of the generation.


UI State
~~~~~~~~
I've done an initial implementation of most of the UI requirements 
above, plus a few extra. It's implemented as a single class and a 
main loop. However, as I implemented things like importing grid states 
and changing cell states I noticed that I was creating extra loops 
within the TerminalController object. That seems redundant. So, can I 
just have a single UI loop, and have the type of input it collects 
change based on the state of the UI?

I'm thinking of this as a state machine. I'm not sure if that term is 
actually correct here, but it seems to fit. I've got one machine, 
which is the loop, and I want to have it change its behavior based on 
its current state.

What would be the requirements here?

* There is a single loop that handles user input
* There are multiple states, which include:
    * Starting state
    * Main state
    * Load state
    * Save state
    * Edit state
    * End state
* Each state must have access to the current grid
* Each state must display its UI to the terminal

That seems possible. A way of doing it would be something like this::

    def main(grid, term):
        state = Start(grid, term)
        state.update_ui()
        while not isinstance(state, End):
            cmd, *args = state.input()
            new_state = getattr(state, cmd)(*args)
            if new_state != state:
                new_state.update_ui()
            state = new_state

This would mean the state classes would have the following 
requirements: 

* Each state is a class.
* The End state terminates the loop.
* Each state must have an input() method.
* Each state must have an update_ui() method.
* Each command within the state is a method.
* Each command method must return the next state object.
* The input() method must return the name of a command method and 
  any arguments for that method.

That seems a little cleaner of a design than the current UI.
            